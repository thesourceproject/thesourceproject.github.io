(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{219:function(t,e,n){t.exports=n.p+"img/competitive11-1.8f1a46f.png"},220:function(t,e,n){t.exports=n.p+"img/competitive11-2.0af2936.png"},245:function(t,e,n){"use strict";n.r(e);var r=n(110),o=n(111),h={name:"competitive11",components:{ArticleHeader:r.default,CodeSnippet:o.default},head:{title:"LeetCode #3 Longest Substring Without Repeating Characters | The Source Project",meta:[{hid:"description",name:"description",content:"Check out this problem on LeetCode. Given a string s, find the length of the longest substring without repeating characters."}]}},c=n(8),component=Object(c.a)(h,(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("main",[r("article",{staticClass:"w-full max-w-4xl mx-auto flex flex-col"},[r("ArticleHeader",{attrs:{title:"LeetCode #3 Longest Substring Without Repeating Characters",date:"30 Mar '21",readTime:"15 min read",tags:["competitive","data","structures","algorithms","java","python","intermediate"]}}),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),r("p",{staticClass:"mt-8"},[t._v("\n        A "),r("strong",[t._v("substring")]),t._v(" is a contiguous sequence of characters\n        within a string. For example, "),r("em",[t._v('"cat"')]),t._v(" is a substring of\n        "),r("em",[t._v('"a cat jumps"')]),t._v("."),r("br"),t._v("\n        The brute-force approach is to try all possible substrings and find the\n        ones without any repeating characters. Among these, we will return the\n        length of the longest substring. Here, "),r("strong",[t._v("s")]),t._v(" can contain\n        any ASCII character and not just lower-case letters. Hence, we'll\n        require an array of size 256."),r("br"),t._v(" "),r("strong",[t._v("Note")]),t._v(" - This tutorial assumes you have some basic\n        understanding of Java and Python. You may refer to our\n        "),r("NuxtLink",{staticClass:"text-text-3 hover:underline focus:underline focus:outline-none",attrs:{to:{path:"/find",query:{q:"basics"}}}},[t._v("previous tutorials")]),t._v("\n        before you continue.\n      ")],1),t._v(" "),r("CodeSnippet",{attrs:{code:"// Java\npublic int lengthOfLongestSubstring(String s) {\n    int maxLength = 0;\n    for (int i = 0; i < s.length(); ++i) {\n        for (int j = i + 1; j < s.length() + 1; ++j) {\n            if (hasDistinctCharacters(s.substring(i, j))) { // Check if the substring of 's' from 'i' to 'j - 1' has distinct characters.\n                maxLength = Math.max(maxLength, j - i); // Store this length if it's greater than 'maxLength'.\n            }\n        }\n    }\n    return maxLength;\n}\nboolean hasDistinctCharacters(String s) {\n    boolean[] exists = new boolean[256];\n    for (int i = 0; i < s.length(); ++i) {\n        if (exists[s.charAt(i)]) { // Check whether this character has been encountered previously.\n            return false;\n        }\n        exists[s.charAt(i)] = true; // Set the flag for this character to 'true'.\n    }\n    return true; // Default return value.\n}",lang:"language-java"}}),t._v(" "),r("CodeSnippet",{attrs:{code:"# Python3\ndef lengthOfLongestSubstring(s: str) -> int:\n    maxLength = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if(hasDistinctCharacters(s[i:j])):  # Check if the substring of 's' from 'i' to 'j - 1' has distinct characters.\n                maxLength = max(maxLength, j - i)  # Store this length if it's greater than 'maxLength'.\n    return maxLength\n\ndef hasDistinctCharacters(s: str) -> bool:\n    exists = [False] * 256\n    for c in s:  # For every character 'c' in 's'.\n        if(exists[ord(c)]):  # Check whether this character has been encountered previously.\n            return False\n        exists[ord(c)] = True  # Set the flag for this character to 'true'.\n    return True  # Default return value.",lang:"language-python"}}),t._v(" "),t._m(5),t._v(" "),r("CodeSnippet",{attrs:{code:"// Java\npublic int lengthOfLongestSubstring(String s) {\n    for (int i = s.length(); i > 0; --i) { // 'i' is the length of the substring.\n        for (int j = 0; j < s.length() - i + 1; ++j) { // 'j' is the starting index of the substring.\n            if (hasDistinctCharacters(s.substring(j, j + i))) { // Check if the substring of 's' from 'j' to 'j + i - 1' has distinct characters.\n                return i; // Return this length.\n            }\n        }\n    }\n    return 0; // Default return value.\n}",lang:"language-java"}}),t._v(" "),r("CodeSnippet",{attrs:{code:"# Python3\ndef lengthOfLongestSubstring(s: str) -> int:\n    for i in range(len(s), 0, -1):  # 'i' is the length of the substring\n        for j in range(len(s) - i + 1):  # 'j' is the starting index of the substring\n            if(hasDistinctCharacters(s[j:j + i])):  # Check if the substring of 's' from 'j' to 'j + i - 1' has distinct characters.\n                return i  # Return this length.\n    return 0  # Default return value.",lang:"language-python"}}),t._v(" "),t._m(6),t._v(" "),r("img",{staticClass:"mx-auto mt-6 max-w-full",attrs:{src:n(219),alt:"Sliding Window"}}),t._v(" "),t._m(7),t._v(" "),r("img",{staticClass:"mx-auto mt-6 max-w-full",attrs:{src:n(220),alt:"Sliding Window For Longest Substring Without Repeating Characters"}}),t._v(" "),t._m(8),t._v(" "),r("CodeSnippet",{attrs:{code:"// Java\npublic int lengthOfLongestSubstring(String s) {\n    int ans = 0, l = 0, r = 0, count[] = new int[256]; // Create an array to store the count of characters.\n    while(r < s.length()) { // Stop at the last character.\n        char c = s.charAt(r);\n        while(count[c] > 0) { // Run loop if the character is present in the window.\n            --count[s.charAt(l)]; // Remove characters of the window from the left.\n            ++l;\n        }\n        ++count[c]; // Add this character to the window.\n        ++r;\n        ans = Math.max(ans, r - l); // Store the maximum size of the window till now.\n    }\n    return ans;\n}",lang:"language-java"}}),t._v(" "),r("CodeSnippet",{attrs:{code:"# Python3\ndef lengthOfLongestSubstring(self, s: str) -> int:\n    ans, l, r, count = 0, 0, 0, [0] * 256  # Create an array to store the count of characters.\n    while(r < len(s)):  # Stop at the last character.\n        c = ord(s[r])\n        while(count[c] > 0):  # Run loop if the character is present in the window.\n            count[ord(s[l])] -= 1  # Remove characters of the window from the left.\n            l += 1\n        count[c] += 1  # Add this character to the window.\n        r += 1\n        ans = max(ans, r - l)  # Store the maximum size of the window till now.\n    return ans",lang:"language-python"}}),t._v(" "),t._m(9),t._v(" "),r("CodeSnippet",{attrs:{code:"// Java\npublic int lengthOfLongestSubstring(String s) {\n    int ans = 0, l = 0, r = 0, pos[] = new int[256];\n    for(int i = 0; i < 256; ++i) {\n        pos[i] = -1; // '-1' indicates that character has not been found yet.\n    }\n    while(r < s.length()) {\n        char c = s.charAt(r);\n        l = Math.max(l, pos[c] + 1); // 'l' should not change if 'pos[c]' is outside the window.\n        pos[c] = r; // Store the current position of this character.\n        ++r;\n        ans = Math.max(ans, r - l);\n    }\n    return ans;\n}",lang:"language-java"}}),t._v(" "),r("CodeSnippet",{attrs:{code:"# Python3\ndef lengthOfLongestSubstring(self, s: str) -> int:\n    ans, l, r, pos = 0, 0, 0, [-1] * 256  # '-1' indicates that character has not been found yet.\n    while(r < len(s)):\n        c = ord(s[r])\n        l = max(l, pos[c] + 1)  # 'l' should not change if 'pos[c]' is outside the window.\n        pos[c] = r  # Store the current position of this character.\n        r += 1\n        ans = max(ans, r - l)\n    return ans",lang:"language-python"}}),t._v(" "),t._m(10)],1)])}),[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n        Check out\n        "),n("a",{staticClass:"text-text-3 hover:underline focus:underline focus:outline-none",attrs:{rel:"noopener noreferrer",href:"https://leetcode.com/problems/longest-substring-without-repeating-characters/",target:"_blank"}},[t._v("this")]),t._v("\n        problem on LeetCode.\n      ")])},function(){var t=this.$createElement,e=this._self._c||t;return e("a",{staticClass:"mx-auto mt-6 p-6 bg-white rounded-2xl",attrs:{rel:"noopener noreferrer",title:"LeetCode, Public domain, via Wikimedia Commons",href:"https://commons.wikimedia.org/wiki/File:LeetCode_Logo_black_with_text.svg",target:"_blank"}},[e("img",{staticClass:"w-96",attrs:{alt:"LeetCode Logo black with text",src:"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/LeetCode_Logo_black_with_text.svg/640px-LeetCode_Logo_black_with_text.svg.png"}})])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"mt-6"},[t._v("\n        Given a string "),n("strong",[t._v("s")]),t._v(", find the length of the\n        "),n("strong",[t._v("longest substring")]),t._v(" without repeating characters."),n("br"),n("br"),t._v(" "),n("strong",{staticClass:"text-lg"},[t._v("Example 1:")]),n("br"),t._v(" "),n("strong",[t._v("Input:")]),t._v(' s = "abcabcbb"'),n("br"),t._v(" "),n("strong",[t._v("Output:")]),t._v(" 3"),n("br"),t._v(" "),n("strong",[t._v("Explanation:")]),t._v(' The answer is "abc", with the length of\n        3.'),n("br"),n("br"),t._v(" "),n("strong",{staticClass:"text-lg"},[t._v("Example 2:")]),n("br"),t._v(" "),n("strong",[t._v("Input:")]),t._v(' s = "bbbbb"'),n("br"),t._v(" "),n("strong",[t._v("Output:")]),t._v(" 1"),n("br"),t._v(" "),n("strong",[t._v("Explanation:")]),t._v(' The answer is "b", with the length of\n        1.'),n("br"),n("br"),t._v(" "),n("strong",{staticClass:"text-lg"},[t._v("Example 3:")]),n("br"),t._v(" "),n("strong",[t._v("Input:")]),t._v(' s = "pwwkew"'),n("br"),t._v(" "),n("strong",[t._v("Output:")]),t._v(" 3"),n("br"),t._v(" "),n("strong",[t._v("Explanation:")]),t._v(' The answer is "wke", with the length of 3.\n        Notice that the answer must be a substring, "pwke" is a subsequence and\n        not a substring.'),n("br"),n("br"),t._v(" "),n("strong",{staticClass:"text-lg"},[t._v("Example 4:")]),n("br"),t._v(" "),n("strong",[t._v("Input:")]),t._v(' s = ""'),n("br"),t._v(" "),n("strong",[t._v("Output:")]),t._v(" 0"),n("br"),n("br"),t._v(" "),n("strong",{staticClass:"text-lg"},[t._v("Constraints:")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",{staticClass:"list-disc list-inside"},[n("li",[t._v("0 <= s.length <= 5 * 10"),n("sup",[t._v("4")])]),t._v(" "),n("li",[n("strong",[t._v("s")]),t._v(" consists of English letters, digits, symbols and\n          spaces.\n        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"mt-12 flex flex-col"},[n("h2",{staticClass:"text-2xl"},[t._v("Getting Started")]),t._v(" "),n("div",{staticClass:"w-6 h-1 bg-background-2 rounded-full"})])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n        At first glance, due to the two nested "),n("em",[t._v("for")]),t._v(" loops, this solution\n        appears to be "),n("strong",[t._v("O(n"),n("sup",[t._v("2")]),t._v(")")]),t._v(". But in fact, it is\n        "),n("strong",[t._v("O(n"),n("sup",[t._v("3")]),t._v(")")]),t._v(" because of the\n        "),n("strong",[t._v("O(n)")]),t._v(" time taken by "),n("em",[t._v("hasDistinctCharacters()")]),t._v(".\n        Also, it has a space complexity of "),n("strong",[t._v("O(n)")]),t._v(", which is\n        required to store a substring. This solution will exceed the time limit\n        and won't be accepted."),n("br"),n("br"),t._v("\n        We can improve this solution slightly by checking the longer substrings\n        first. This way, we can return the length of the first substring we come\n        across that has no repeating characters.\n      ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n        Although this solution is definitely faster than the previous one, it\n        still has the same time and space complexity. This is because in the\n        worst case(i.e. when the answer is 1) our solution will have to process\n        every substring."),n("br"),n("br"),t._v("\n        By now, it is clear that the brute-force approach will not work. The\n        constraints of the problem don't even allow an\n        "),n("strong",[t._v("O(n"),n("sup",[t._v("2")]),t._v(")")]),t._v(" solution, let alone an\n        "),n("strong",[t._v("O(n"),n("sup",[t._v("3")]),t._v(")")]),t._v(" one."),n("br"),t._v("\n        These types of problems are solved using the\n        "),n("strong",[t._v("sliding window")]),t._v(" technique. But, what does it mean?\n      ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"mt-6"},[t._v("\n        In the diagram above, we can see a sliding window of size 5 moving\n        across the array(or string). A sliding window doesn't need to have a\n        constant size as long as "),n("em",[t._v("L")]),t._v(" <= "),n("em",[t._v("R")]),t._v(". A sliding window\n        expands towards the right and shrinks from the left while keeping track\n        of its contents in "),n("strong",[t._v("O(1)")]),t._v(" time. But how can this help us?\n      ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticClass:"mt-6"},[t._v("\n        The approach seems to be simple enough. The only thing that remains is\n        the implementation and there are many ways to do that."),n("br"),n("br"),t._v("\n        One way is to use an array to store the character counts of our window.\n        The maximum distance between "),n("em",[t._v("L")]),t._v(" and "),n("em",[t._v("R")]),t._v(" at any given time\n        will be the answer. We just have to make sure whenever we come across a\n        character present in our window, we have to keep removing characters\n        from the left until the repeated character is removed.\n      ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n        This solution has both the optimal "),n("strong",[t._v("O(n)")]),t._v(" time and\n        "),n("strong",[t._v("O(1)")]),t._v(" space complexities. "),n("br"),t._v(" "),n("strong",[t._v("Note")]),t._v(" - The auxiliary space used is constant because our\n        "),n("em",[t._v("count")]),t._v(" array has a fixed size that is known beforehand."),n("br"),n("br"),t._v("\n        It is impossible to go faster or be more efficient than this, but there\n        is a tiny optimization that we can make. Notice that we don't need to\n        store the count of characters as we can only have at most one of each\n        type in our window. Instead, we can use an array to store the last\n        position of a character. How will this help us? Well, upon encountering\n        a repeated character, we can directly skip over to its previous\n        position.\n      ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n        This solution is slightly faster than the previous one, though it has\n        the same worst-case time and space complexities."),n("br"),n("br"),t._v("\n        We have discussed a few of the many possible approaches to this problem.\n        One thing to remember is that you should always consider the sliding\n        window technique when facing problems similar to this one. It is\n        commonly used when you are looking for a range in an array or string\n        while following some conditions."),n("br"),n("br"),t._v("\n        Now try to come up with your own methods to solve this problem and keep\n        on practicing.\n      ")])}],!1,null,null,null);e.default=component.exports;installComponents(component,{ArticleHeader:n(110).default,CodeSnippet:n(111).default})}}]);