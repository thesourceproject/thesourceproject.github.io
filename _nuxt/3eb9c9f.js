(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{227:function(e,t,n){e.exports=n.p+"img/competitive15-1.a7d5de8.png"},228:function(e,t,n){e.exports=n.p+"img/competitive15-2.0bf12d4.png"},229:function(e,t,n){e.exports=n.p+"img/competitive15-3.cb8279b.png"},256:function(e,t,n){"use strict";n.r(t);var r=n(110),o=n(111),l={name:"competitive15",components:{ArticleHeader:r.default,CodeSnippet:o.default},head:{title:"LeetCode #6 ZigZag Conversion | The Source Project",meta:[{hid:"description",name:"description",content:'Check out this problem on LeetCode. The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this:'}]}},c=n(8),component=Object(c.a)(l,(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("main",[r("article",{staticClass:"w-full max-w-4xl mx-auto flex flex-col"},[r("ArticleHeader",{attrs:{title:"LeetCode #6 ZigZag Conversion",date:"17 Jun '21",readTime:"10 min read",tags:["competitive","data","structures","algorithms","java","python","intermediate"]}}),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),r("CodeSnippet",{attrs:{code:"P   A   H   N\nA P L S I I G\nY   I   R",lang:"language-none"}}),e._v(" "),e._m(3),e._v(" "),r("CodeSnippet",{attrs:{code:"string convert(string s, int numRows);",lang:"language-none"}}),e._v(" "),e._m(4),e._v(" "),r("CodeSnippet",{attrs:{code:"P     I     N\nA   L S   I G\nY A   H R\nP     I",lang:"language-none"}}),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),r("img",{staticClass:"mx-auto mt-6 max-w-full",attrs:{src:n(227),alt:"Zigzag String"}}),e._v(" "),e._m(9),e._v(" "),r("img",{staticClass:"mx-auto mt-6 max-w-full",attrs:{src:n(228),alt:"First and last rows"}}),e._v(" "),e._m(10),e._v(" "),r("img",{staticClass:"mx-auto mt-6 max-w-full",attrs:{src:n(229),alt:"Middle rows"}}),e._v(" "),e._m(11),e._v(" "),r("CodeSnippet",{attrs:{code:"// Java\npublic String convert(String s, int numRows) {\n    if (numRows == 1) { // Base case.\n        return s;\n    }\n    StringBuilder zigzag = new StringBuilder(); // To store the output.\n    for (int i = 0; i < s.length(); i += (numRows - 1) * 2) {\n        zigzag.append(s.charAt(i)); // Append the characters of the first row.\n    }\n    for (int r = 1; r < numRows - 1; ++r) { // Iterate for all the middle-rows.\n        int i = r; // Starting character of each row\n        while (true) {\n            if (i >= s.length()) {\n                break; // Break the loop if the character is out of bounds.\n            }\n            zigzag.append(s.charAt(i)); // Append the first character of the pair.\n            if (i + (numRows - r - 1) * 2 >= s.length()) {\n                break;\n            }\n            zigzag.append(s.charAt(i + (numRows - r - 1) * 2)); // Append the second character of the pair.\n            i += (numRows - 1) * 2; // Skip over to the next pair.\n        }\n    }\n    for (int i = numRows - 1; i < s.length(); i += (numRows - 1) * 2) {\n        zigzag.append(s.charAt(i)); // Append the characters of the last row.\n    }\n    return zigzag.toString(); // Return the zigzag as a String.\n}",lang:"language-java"}}),e._v(" "),r("CodeSnippet",{attrs:{code:'# Python3\ndef convert(s, numRows):\n    if (numRows == 1):  # Base case.\n        return s\n    zigzag = []\n    for i in range(0, len(s), (numRows - 1) * 2):\n        zigzag.append(s[i])  # Append the characters of the first row.\n    for r in range(1, numRows - 1):\n        i = r  # Starting character of each row\n        while(True):\n            if(i >= len(s)):\n                break  # Break the loop if the character is out of bounds.\n            zigzag.append(s[i])\n            if(i + (numRows - r - 1) * 2 >= len(s)):\n                break\n            zigzag.append(s[i + (numRows - r - 1) * 2])  # Append the second character of the pair.\n            i += (numRows - 1) * 2  # Skip over to the next pair.\n    for i in range(numRows - 1, len(s), (numRows - 1) * 2):\n        zigzag.append(s[i])  # Append the characters of the last row.\n    return "".join(zigzag)  # Return the zigzag as a String.\n',lang:"language-python"}}),e._v(" "),e._m(12)],1)])}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        Check out\n        "),n("a",{staticClass:"text-text-3 hover:underline focus:underline focus:outline-none",attrs:{rel:"noopener noreferrer",href:"https://leetcode.com/problems/zigzag-conversion/",target:"_blank"}},[e._v("this")]),e._v("\n        problem on LeetCode.\n      ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("a",{staticClass:"mx-auto mt-6 p-6 bg-white rounded-2xl",attrs:{rel:"noopener noreferrer",title:"LeetCode, Public domain, via Wikimedia Commons",href:"https://commons.wikimedia.org/wiki/File:LeetCode_Logo_black_with_text.svg",target:"_blank"}},[t("img",{staticClass:"w-96",attrs:{alt:"LeetCode Logo black with text",src:"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/LeetCode_Logo_black_with_text.svg/640px-LeetCode_Logo_black_with_text.svg.png"}})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",{staticClass:"mt-6"},[e._v("\n        The string "),n("strong",[e._v('"PAYPALISHIRING"')]),e._v(" is written in a zigzag\n        pattern on a given number of rows like this: (you may want to display\n        this pattern in a fixed font for better legibility)\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        And then read line by line: "),n("strong",[e._v('"PAHNAPLSIIGYIR"')]),n("br"),e._v("\n        Write the code that will take a string and make this conversion given a\n        number of rows:\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("strong",{staticClass:"text-lg"},[e._v("Example 1:")]),n("br"),e._v(" "),n("strong",[e._v("Input:")]),e._v(' s = "PAYPALISHIRING", numRows = 3'),n("br"),e._v(" "),n("strong",[e._v("Output:")]),e._v(' "PAHNAPLSIIGYIR"'),n("br"),n("br"),e._v(" "),n("strong",{staticClass:"text-lg"},[e._v("Example 2:")]),n("br"),e._v(" "),n("strong",[e._v("Input:")]),e._v(' s = "PAYPALISHIRING", numRows = 4'),n("br"),e._v(" "),n("strong",[e._v("Output:")]),e._v(' "PINALSIGYAHRPI"'),n("br"),e._v(" "),n("strong",[e._v("Explanation:")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[n("strong",{staticClass:"text-lg"},[e._v("Example 3:")]),n("br"),e._v(" "),n("strong",[e._v("Input:")]),e._v(' s = "A", numRows = 1'),n("br"),e._v(" "),n("strong",[e._v("Output:")]),e._v(' "A"'),n("br"),n("br"),e._v(" "),n("strong",{staticClass:"text-lg"},[e._v("Constraints:")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",{staticClass:"list-disc list-inside"},[n("li",[e._v("1 <= s.length <= 1000")]),e._v(" "),n("li",[n("strong",[e._v("s")]),e._v(" consists of English letters (lower-case and\n          upper-case), "),n("strong",[e._v("' , '")]),e._v(" and "),n("strong",[e._v("' . '")]),e._v(".\n        ")]),e._v(" "),n("li",[e._v("1 <= numRows <= 1000")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"mt-12 flex flex-col"},[n("h2",{staticClass:"text-2xl"},[e._v("Getting Started")]),e._v(" "),n("div",{staticClass:"w-6 h-1 bg-background-2 rounded-full"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",{staticClass:"mt-8"},[e._v("\n        We are given a string\n        "),n("strong",[e._v("s")]),e._v(" and "),n("strong",[e._v("numRows")]),e._v(" i.e. number of rows in\n        the zigzag. The problem wants us to return a string representing\n        "),n("strong",[e._v("s")]),e._v("'s zigzag form row-wise."),n("br"),e._v("\n        There are multiple approaches to this problem. Many of them involve\n        using extra space apart from what is required to store the output. Here,\n        we will discuss an algorithm that uses simple arithmetic to achieve our\n        goal."),n("br"),n("br"),e._v("\n        Before getting to the actual problem, we will first cover the base case,\n        i.e. when "),n("strong",[e._v("numRows")]),e._v(" is 1. Meaning, there is a single row\n        and the zigzag will be identical to "),n("strong",[e._v("s")]),e._v(". In this case, we\n        will return "),n("strong",[e._v("s")]),e._v(" directly."),n("br"),n("br"),e._v("\n        Now, let's take an example.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",{staticClass:"mt-6"},[e._v("\n        Now, we should notice the top row of the zigzag carefully. We can see\n        that the first row contains characters separated by a constant number.\n        But what is that constant?"),n("br"),e._v("\n        From "),n("strong",[e._v("A")]),e._v(" to "),n("strong",[e._v("I")]),e._v(", we go down and up 4 times\n        to return to the same row. If "),n("strong",[e._v("numRows")]),e._v(" was 10. We would\n        go down and up 9 times to reach the next character of the top row.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",{staticClass:"mt-6"},[e._v("\n        By this, we can derive that the jump distance between two characters in\n        the first row is "),n("strong",[e._v("(numRows - 1) Ã— 2")]),e._v("."),n("br"),e._v("\n        The same applies to the bottom row. The only difference is the starting\n        character."),n("br"),n("br"),e._v("\n        We have completed the easy part. Now, we need to find a way to derive\n        the middle rows.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",{staticClass:"mt-6"},[e._v("\n        Looking at the middle rows, we observe that the characters can be seen\n        as pairs of equal gaps. The distance between "),n("strong",[e._v("B")]),e._v(" and\n        "),n("strong",[e._v("H")]),e._v(" is the same as "),n("strong",[e._v("J")]),e._v(" and\n        "),n("strong",[e._v("P")]),e._v("."),n("br"),e._v("\n        In the zigzag traversal, we visit "),n("strong",[e._v("B")]),e._v(" going down and\n        "),n("strong",[e._v("H")]),e._v(" when going up. It's the same for every pair in the\n        same row. We need to calculate the gap in each pair of a row."),n("br"),n("br"),e._v("\n        On Row 1, We go down and back up 3 times."),n("br"),e._v("\n        On Row 2, We go down and back up 2 times."),n("br"),e._v("\n        On Row 3, We go down and back up 1 time."),n("br"),n("br"),e._v("\n        To complete a pair, we skip characters equal to twice the number of rows\n        below it. For example, there are 2 rows below "),n("strong",[e._v("C")]),e._v(", so we\n        skip 4 characters to reach "),n("strong",[e._v("G")]),e._v(". Therefore, the pair gap\n        is equal to "),n("strong",[e._v("(numRows - 1 - Row")]),n("sub",[e._v("0-indexed")]),n("strong",[e._v(") Ã— 2")]),n("br"),n("br"),e._v("\n        But how many characters should be skipped to reach the next pair?"),n("br"),e._v("\n        We can observe that the gap between the first characters of consecutive\n        pairs is the same as for the first and last rows, i.e.\n        "),n("strong",[e._v("(numRows - 1) Ã— 2")]),e._v("."),n("br"),n("br"),e._v("\n        We have now understood the basic arithmetic needed to solve this\n        problem. It's time to write the code for this.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        This solution has the optimal "),n("strong",[e._v("O(n)")]),e._v(" time complexity. It\n        also uses "),n("strong",[e._v("O(n)")]),e._v(" extra space for the\n        "),n("em",[e._v("zigzag")]),e._v(" StringBuilder/List object."),n("br"),n("br"),e._v("\n        Hooray! You've solved one more problem. Now go and try some more.\n      ")])}],!1,null,null,null);t.default=component.exports;installComponents(component,{ArticleHeader:n(110).default,CodeSnippet:n(111).default})}}]);