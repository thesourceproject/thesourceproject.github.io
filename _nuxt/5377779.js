(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{193:function(e,t,n){"use strict";n.r(t);var r={name:"ArticleHeader",props:["title","readTime","date","tags"]},o=n(16),component=Object(o.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("header",{staticClass:"my-8 flex flex-col"},[n("h1",{staticClass:"text-5xl font-bold leading-snug"},[e._v(e._s(e.title))]),e._v(" "),n("p",{staticClass:"mt-6 opacity-50"},[e._v(e._s(e.date)+" | "+e._s(e.readTime))]),e._v(" "),n("p",{staticClass:"mt-2 flex flex-wrap"},e._l(e.tags,(function(t){return n("NuxtLink",{key:t,staticClass:"mr-4 hover:underline focus:underline focus:outline-none",attrs:{to:{path:"/find",query:{q:t}}}},[e._v("\n      #"+e._s(t)+"\n    ")])})),1)])}),[],!1,null,null,null);t.default=component.exports;installComponents(component,{Header:n(50).default})},194:function(e,t,n){"use strict";n.r(t);var r=n(68),o=(n(195),n(196),n(197),{name:"CodeSnippet",props:["code","lang"],mounted:function(){r.a.highlightAll()}}),l=n(16),component=Object(l.a)(o,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"sm:mx-10 my-4"},[t("pre",[t("code",{class:this.lang},[this._v(this._s(this.code))])])])}),[],!1,null,null,null);t.default=component.exports},195:function(e,t){!function(e){var t=e.languages.powershell={comment:[{pattern:/(^|[^`])<#[\s\S]*?#>/,lookbehind:!0},{pattern:/(^|[^`])#.*/,lookbehind:!0}],string:[{pattern:/"(?:`[\s\S]|[^`"])*"/,greedy:!0,inside:{function:{pattern:/(^|[^`])\$\((?:\$\([^\r\n()]*\)|(?!\$\()[^\r\n)])*\)/,lookbehind:!0,inside:{}}}},{pattern:/'(?:[^']|'')*'/,greedy:!0}],namespace:/\[[a-z](?:\[(?:\[[^\]]*]|[^\[\]])*]|[^\[\]])*]/i,boolean:/\$(?:true|false)\b/i,variable:/\$\w+\b/,function:[/\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\b/i,/\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\b/i],keyword:/\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\b/i,operator:{pattern:/(\W?)(?:!|-(?:eq|ne|gt|ge|lt|le|sh[lr]|not|b?(?:and|x?or)|(?:Not)?(?:Like|Match|Contains|In)|Replace|Join|is(?:Not)?|as)\b|-[-=]?|\+[+=]?|[*\/%]=?)/i,lookbehind:!0},punctuation:/[|{}[\];(),.]/},n=t.string[0].inside;n.boolean=t.boolean,n.variable=t.variable,n.function.inside=t}(Prism)},196:function(e,t){Prism.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0},"string-interpolation":{pattern:/(?:f|rf|fr)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:{{)*){(?!{)(?:[^{}]|{(?!{)(?:[^{}]|{(?!{)(?:[^{}])+})+})+}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|rb|br)?("""|''')[\s\S]*?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|rb|br)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^\s*)@\w+(?:\.\w+)*/im,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:and|as|assert|async|await|break|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:True|False|None)\b/,number:/(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?j?\b/i,operator:/[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},Prism.languages.python["string-interpolation"].inside.interpolation.inside.rest=Prism.languages.python,Prism.languages.py=Prism.languages.python},197:function(e,t){!function(e){var t=/\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/,n=/(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source,r={pattern:RegExp(n+/[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),lookbehind:!0,inside:{namespace:{pattern:/^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,inside:{punctuation:/\./}},punctuation:/\./}};e.languages.java=e.languages.extend("clike",{"class-name":[r,{pattern:RegExp(n+/[A-Z]\w*(?=\s+\w+\s*[;,=())])/.source),lookbehind:!0,inside:r.inside}],keyword:t,function:[e.languages.clike.function,{pattern:/(\:\:\s*)[a-z_]\w*/,lookbehind:!0}],number:/\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,operator:{pattern:/(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,lookbehind:!0}}),e.languages.insertBefore("java","string",{"triple-quoted-string":{pattern:/"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,greedy:!0,alias:"string"}}),e.languages.insertBefore("java","class-name",{annotation:{pattern:/(^|[^.])@\w+(?:\s*\.\s*\w+)*/,lookbehind:!0,alias:"punctuation"},generics:{pattern:/<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<[\w\s,.&?]*>)*>)*>)*>/,inside:{"class-name":r,keyword:t,punctuation:/[<>(),.:]/,operator:/[?&|]/}},namespace:{pattern:RegExp(/(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0,inside:{punctuation:/\./}}})}(Prism)},236:function(e,t,n){"use strict";n.r(t);var r=n(193),o=n(194),l={name:"basics4",components:{ArticleHeader:r.default,CodeSnippet:o.default},head:{title:"Handling user input in Python | The Source Project",meta:[{hid:"description",name:"description",content:"While developing Python applications we often need to allow user interaction, either to obtain necessary data or to direct the flow of our program. Python enables this functionality through its inbuilt input() function."}]}},c=n(16),component=Object(c.a)(l,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("main",[n("article",{staticClass:"w-full max-w-4xl mx-auto flex flex-col"},[n("ArticleHeader",{attrs:{title:"Handling user input in Python",date:"8 Jan '21",readTime:"5 min read",tags:["basics","python","beginner"]}}),e._v(" "),n("p",[e._v("\n        While developing Python applications we often need to allow user\n        interaction, either to obtain necessary data or to direct the flow of\n        our program. Python enables this functionality through its inbuilt\n        "),n("strong",[e._v("input()")]),e._v("\n        function. In this tutorial, we will learn how to use it to create\n        dynamic applications."),n("br"),e._v(" "),n("strong",[e._v("Note")]),e._v(" - This tutorial assumes you have some basic\n        understanding of Python. You may refer to our\n        "),n("NuxtLink",{staticClass:"text-text-3 hover:underline focus:underline focus:outline-none",attrs:{to:"/article/3-Python-fundamentals"}},[e._v("previous tutorial")]),e._v("\n        before you continue.\n      ")],1),e._v(" "),e._m(0),e._v(" "),n("p",{staticClass:"mt-8"},[e._v("Let's start with a basic example.")]),e._v(" "),n("CodeSnippet",{attrs:{code:"name = input('Enter your name: ')\nprint('Hello', name)",lang:"language-python"}}),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),n("CodeSnippet",{attrs:{code:"number = int(input())\nprint('Cube of the given number is ', number ** 3)",lang:"language-python"}}),e._v(" "),e._m(4),e._v(" "),n("CodeSnippet",{attrs:{code:"num1 = float(input())\nnum2 = float(input())\nprint('Sum of the given numbers is ', num1 + num2)",lang:"language-python"}}),e._v(" "),e._m(5),e._v(" "),n("CodeSnippet",{attrs:{code:"total = 0\nnumbers = int(input('How many numbers do you want to enter: '))\nfor i in range(numbers):\n  total = total + float(input()) # total += float(input())\nprint('Sum of the given numbers is ', total)",lang:"language-python"}}),e._v(" "),e._m(6),e._v(" "),n("CodeSnippet",{attrs:{code:"fruits = input('Enter the names of fruits separated by comma: ')  # Apple, Banana, Cherry\nprint(fruits.split(', '))  # ['Apple', 'Banana', 'Cherry'] (Split the string using the delimiter ', ')",lang:"language-python"}}),e._v(" "),e._m(7),e._v(" "),n("CodeSnippet",{attrs:{code:"numbers = input('Enter the numbers separated by space: ')  # 10 25 12 47\nnumberList = numbers.split()  # By default, the string will be split based on whitespace.\nprint(numberList)  # ['10', '25', '12', '47']\nfor i in range(len(numberList)):\n    numberList[i] = int(numberList[i])  # Convert each string to an integer.\nprint(numberList)  # [10, 25, 12, 47]",lang:"language-python"}}),e._v(" "),e._m(8),e._v(" "),n("CodeSnippet",{attrs:{code:"numbers = input('Enter the numbers separated by space: ')  # 10 25 12 47\nnumberList = list(map(int, numbers.split()))\nprint(numberList)  # [10, 25, 12, 47]",lang:"language-python"}}),e._v(" "),n("p",[e._v("\n        That's all you need to know about handling user input in Python. Now you\n        can practice making some programs requiring user input on your own.\n      ")])],1)])}),[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"mt-12 flex flex-col"},[t("h2",{staticClass:"text-2xl"},[this._v("Getting Started")]),this._v(" "),t("div",{staticClass:"w-6 h-1 bg-background-2 rounded-full"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        When you run this, Python will prompt you to enter your name in the\n        terminal. Type anything and press enter to continue. It will print\n        "),n("em",[e._v("Hello")]),e._v(", then space, and then your name."),n("br"),e._v("\n        What we did here was that we captured the user input and stored it in a\n        variable called "),n("strong",[e._v("name")]),e._v(" and then printed a message using\n        that variable. The "),n("em",[e._v("input()")]),e._v(" function can also take an\n        "),n("em",[e._v("optional")]),e._v(" string that can be shown to the user before giving an\n        input which in our case was "),n("strong",[e._v("Enter your name:")]),n("br"),n("br"),e._v("\n        Now let's perform some mathematical operations on user input but before\n        we continue we need to learn a bit about data types in Python. Python\n        has some basic data types -\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",{staticClass:"mt-4 list-disc list-inside"},[n("li",[e._v("Integer: represents mathematical integers.")]),e._v(" "),n("li",[e._v("Floating-Point Number: numbers with a fractional part.")]),e._v(" "),n("li",[e._v("\n          Boolean: a data type that can only have one of the two values,\n          "),n("strong",[e._v("True")]),e._v(" or "),n("strong",[e._v("False")]),e._v(".\n        ")]),e._v(" "),n("li",[e._v("\n          String: a set of characters such as letters, numbers, symbols, etc.\n        ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",{staticClass:"mt-4"},[this._v("\n        The "),t("em",[this._v("input()")]),this._v(" function returns a string that represents the\n        captured user input but we cannot directly perform mathematical\n        operations on strings in Python."),t("br"),this._v("\n        Therefore, we need to convert our input string to an appropriate data\n        type first."),t("br"),this._v("\n        Run the following.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        Before storing our user input in the variable\n        "),n("strong",[e._v("number")]),e._v(", we convert it to an integer using the\n        "),n("strong",[e._v("int()")]),e._v(" function. Now we use the\n        "),n("strong",[e._v("**")]),e._v("(Exponentiation operator) to find the cube of the\n        integer."),n("br"),e._v(" "),n("strong",[e._v("Note")]),e._v(" - if you supply a non-integer value to the\n        program, you will receive a message like\n        "),n("em",[e._v("ValueError: invalid literal for int() with base 10")]),e._v(". This is\n        because the "),n("strong",[e._v("int()")]),e._v(" function expects an integer string to\n        convert its type."),n("br"),n("br"),e._v("\n        Similarly, we can input floating-point numbers by using the\n        "),n("strong",[e._v("float()")]),e._v(" function.\n      ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("\n        This program can not only take integers(e.g. 1, 4, 200512) but also\n        fractional-numbers(e.g. 3.14, 5.6, 925.163) as input."),t("br"),this._v("\n        Like in the previous program, it will throw a "),t("em",[this._v("ValueError")]),this._v(" if a\n        non-numeric value is supplied."),t("br"),t("br"),this._v("\n        We can also use the "),t("em",[this._v("input()")]),this._v(" function inside a loop. This is\n        useful when we do not know in advance how many times the user input is\n        needed.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        First, we create a variable "),n("strong",[e._v("total")]),e._v("(not "),n("em",[e._v("sum")]),e._v(", as\n        "),n("em",[e._v("sum")]),e._v(" is an in-built function of Python and therefore, should be\n        avoided). Then we ask the user how many numbers he/she will input."),n("br"),e._v("\n        After that, we run a "),n("strong",[e._v("for")]),e._v(" loop that many times, each\n        time asking for a number and adding it to our\n        "),n("strong",[e._v("total")]),e._v("."),n("br"),n("br"),e._v("\n        What if the user provides all input values in a single line separated by\n        spaces? For example, "),n("em",[e._v("10 25 12 47")]),e._v(". How will we unpack the\n        individual values?"),n("br"),e._v("\n        We know that the "),n("em",[e._v("input()")]),e._v(" function returns a string. Python\n        strings have an inbuilt function called "),n("strong",[e._v("split()")]),e._v(" which\n        splits the string based on a given delimiter(by default, whitespace) and\n        returns a list containing the individual strings.\n      ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("\n        Notice that the split function will return a list of strings. But, what\n        if we had numbers in our input? We will simply loop over each string in\n        this list and call the "),t("em",[this._v("int()")]),this._v(" or "),t("em",[this._v("float()")]),this._v(" function upon\n        it.\n      ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("\n        Luckily, Python has an easier way of doing this with the help of the\n        "),t("strong",[this._v("map()")]),this._v(" function. The "),t("em",[this._v("map()")]),this._v(" function returns an\n        iterator that applies the given function to each of the items in the\n        iterable(list). We wrap this in a "),t("em",[this._v("list()")]),this._v(" function call so that\n        we obtain the list from this iterator.\n      ")])}],!1,null,null,null);t.default=component.exports;installComponents(component,{ArticleHeader:n(193).default,CodeSnippet:n(194).default})}}]);