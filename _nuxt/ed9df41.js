(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{244:function(e,n,t){"use strict";t.r(n);var r=t(110),o=t(111),l={name:"basics10",components:{ArticleHeader:r.default,CodeSnippet:o.default},head:{title:"Handling user input in Java | The Source Project",meta:[{hid:"description",name:"description",content:"In Java, there are two main classes for dealing with user input, namely Scanner and BufferedReader. But which one is better? In this tutorial, we will learn how to use both."}]}},c=t(8),component=Object(c.a)(l,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("main",[t("article",{staticClass:"w-full max-w-4xl mx-auto flex flex-col"},[t("ArticleHeader",{attrs:{title:"Handling user input in Java",date:"21 Mar '21",readTime:"15 min read",tags:["basics","java","beginner"]}}),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),t("CodeSnippet",{attrs:{code:'import java.util.Scanner; // Import the Scanner class.\nclass JavaInput {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print("Enter your name: ");\n        String name = sc.next(); // John\n        System.out.println("Hello " + name); // Hello John\n    }\n}',lang:"language-java"}}),e._v(" "),e._m(5),e._v(" "),t("CodeSnippet",{attrs:{code:'import java.util.Scanner; // Import the Scanner class.\nclass JavaInput {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print("Enter your name: ");\n        String name = sc.nextLine(); // John Smith\n        System.out.println("Hello " + name); // Hello John Smith\n    }\n}',lang:"language-java"}}),e._v(" "),e._m(6),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),t("CodeSnippet",{attrs:{code:'import java.util.Scanner; // Import the Scanner class.\nclass JavaInput {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print("Enter random data: "); // Input can be given in single or multiple lines.\n        int i = sc.nextInt(); // 29\n        long l = sc.nextLong(); // 4921\n        float f = sc.nextFloat(); // 0.5\n        double d = sc.nextDouble(); // 2.57843\n        boolean b = sc.nextBoolean(); // false\n        System.out.println(i + " " + l + " " + f + " " + d + " " + b); // 29 4921 0.5 2.57843 false\n    }\n}',lang:"language-java"}}),e._v(" "),e._m(9),e._v(" "),t("CodeSnippet",{attrs:{code:'import java.util.Scanner; // Import the Scanner class.\nclass JavaInput {\n    public static void main(String args[]) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print("Enter a single character: ");\n        char c = sc.next().charAt(0); // A\n        System.out.println(c); // A\n    }\n}',lang:"language-java"}}),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),t("CodeSnippet",{attrs:{code:'import java.io.*; // Import the InputStreamReader, BufferedReader, and IOException classes.\nclass JavaInput {\n    public static void main(String args[]) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.print("Enter you name: ");\n        String name = br.readLine(); // John Smith\n        System.out.println(name); // John Smith\n    }\n}',lang:"language-java"}}),e._v(" "),e._m(12),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),t("CodeSnippet",{attrs:{code:'import java.io.*; // Import the InputStreamReader, BufferedReader, and IOException classes.\nclass JavaInput {\n    public static void main(String args[]) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println("Enter random data:"); // Input has to be given using multiple lines.\n        int i = Integer.parseInt(br.readLine()); // 29\n        long l = Long.parseLong(br.readLine()); // 4921\n        float f = Float.parseFloat(br.readLine()); // 0.5\n        double d = Double.parseDouble(br.readLine()); // 2.57843\n        boolean b = Boolean.parseBoolean(br.readLine()); // false\n        System.out.println(i + " " + l + " " + f + " " + d + " " + b); // 29 4921 0.5 2.57843 false\n    }\n}',lang:"language-java"}}),e._v(" "),e._m(15),e._v(" "),t("CodeSnippet",{attrs:{code:'import java.io.*; // Import the InputStreamReader, BufferedReader, and IOException classes.\nclass JavaInput {\n    public static void main(String args[]) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println("Enter first character:");\n        char c1 = (char) (br.read()); // Typecast int to char.\n        System.out.println("Enter second character:");\n        char c2 = (char) (br.read());\n        System.out.println(c1 + " " + c2);\n    }\n}',lang:"language-java"}}),e._v(" "),e._m(16),e._v(" "),t("CodeSnippet",{attrs:{code:'import java.io.*; // Import the InputStreamReader, BufferedReader, and IOException classes.\nimport java.util.StringTokenizer; // Import the StringTokenizer class.\nclass JavaInput {\n    public static void main(String args[]) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println("Enter numbers separated by comma:");\n        StringTokenizer st = new StringTokenizer(br.readLine(), ", "); // 10, 20, 30, 40 (Tokenize the string using ", " as the delimiter)\n        int sum = 0;\n        while (st.hasMoreTokens()) {\n            sum += Integer.parseInt(st.nextToken());\n        }\n        System.out.println(sum); // 100\n    }\n}',lang:"language-java"}}),e._v(" "),e._m(17)],1)])}),[function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("\n        In Java, there are two main classes for dealing with user input, namely\n        "),t("strong",[e._v("Scanner")]),e._v(" and "),t("strong",[e._v("BufferedReader")]),e._v(". But which\n        one is better? In this tutorial, we will learn how to use both. If\n        you're planning to go into competitive programming, this tutorial is a\n        must for you.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"mt-12 flex flex-col"},[t("h2",{staticClass:"text-2xl"},[e._v("Getting Started")]),e._v(" "),t("div",{staticClass:"w-6 h-1 bg-background-2 rounded-full"})])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",{staticClass:"mt-8"},[e._v("\n        This tutorial assumes that you have some basic understanding of Java,\n        particularly data-types. Before we dive into the code, first we need to\n        understand how input works. When you type in characters in the console\n        and press\n        "),t("strong",[e._v("Enter")]),e._v(", your input(including the newline character at\n        the end) goes to the program as a stream. The Scanner and BufferedReader\n        classes process this stream of characters in a slightly different\n        manner.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"mt-6 flex flex-col"},[t("h3",{staticClass:"text-xl"},[e._v("Scanner")]),e._v(" "),t("div",{staticClass:"w-4 h-1 bg-background-2 rounded-full"})])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",{staticClass:"mt-4"},[e._v("\n        Let's start with an example of the Scanner class. It is present in the\n        "),t("em",[e._v("java.util")]),e._v(" package. To use it, we need to create an instance of\n        the Scanner class tied to "),t("em",[e._v("System.in")]),e._v("(input stream which is\n        typically connected to the keyboard input of console programs).\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("\n        The "),t("em",[e._v("next()")]),e._v(" method of the Scanner class reads in the stream of\n        characters until it encounters any whitespace(including newline). It\n        then returns those characters as a string(without the terminating\n        newline)."),t("br"),e._v("\n        We cannot use this method if we want to input a string with any spaces\n        in it. Try to run it again with multiple words. It will only capture the\n        first word and ignore the rest. For this, we have another method named\n        "),t("em",[e._v("nextLine()")]),e._v("."),t("br"),e._v(" "),t("strong",[e._v("Note")]),e._v(" - If your IDE(text-editor) gives you a warning\n        like "),t("em",[e._v("Resource leak: 'sc' is never closed")]),e._v(", you can safely ignore\n        it. Unlike file streams, resources tied to "),t("em",[e._v("System.in")]),e._v(" are not\n        required to be closed.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("\n        What if we need to input numbers and not strings. The Scanner class has\n        a number of methods for capturing primitive data-types. These work\n        similar to the "),t("em",[e._v("next()")]),e._v(" method by returning the next token(a\n        group of non-whitespace characters). The following are the most commonly\n        used ones.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ul",{staticClass:"mt-4 list-disc list-inside"},[t("li",[t("em",[e._v("nextInt()")])]),e._v(" "),t("li",[t("em",[e._v("nextLong()")])]),e._v(" "),t("li",[t("em",[e._v("nextFloat()")])]),e._v(" "),t("li",[t("em",[e._v("nextDouble()")])]),e._v(" "),t("li",[t("em",[e._v("nextBoolean()")]),e._v(" - Only accepts "),t("em",[e._v("true")]),e._v(" or "),t("em",[e._v("false")]),e._v(".\n        ")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",{staticClass:"mt-4"},[t("strong",[e._v("Note")]),e._v(" - These functions will throw an\n        "),t("em",[e._v("InputMismatchException")]),e._v(" if the input is of an unexpected type.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("\n        Scanner does not have a separate method to read in a character. Instead,\n        we can use the "),t("em",[e._v("next()")]),e._v(" method to input a single character string\n        and use "),t("em",[e._v("charAt(0)")]),e._v(" to get the first and only character.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("div",{staticClass:"mt-6 flex flex-col"},[t("h3",{staticClass:"text-xl"},[e._v("BufferedReader")]),e._v(" "),t("div",{staticClass:"w-4 h-1 bg-background-2 rounded-full"})])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",{staticClass:"mt-4"},[e._v("\n        The Scanner class provides an easy-to-remember way of taking user input\n        but it has one major disadvantage. It performs poorly when there is a\n        very large amount of data. This becomes a determining factor in\n        competitive programming. BufferedReader, due to its larger buffer size,\n        performs much better."),t("br"),e._v("\n        It is also synchronized, meaning that it is thread-safe, when working in\n        a multi-threading environment."),t("br"),t("br"),e._v("\n        Let's look at a basic example of BufferedReader.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("\n        The syntax for BufferedReader is slightly more difficult to remember.\n        One notable difference is that the "),t("em",[e._v("readLine()")]),e._v(" and\n        "),t("em",[e._v("read()")]),e._v(" methods of BufferedReader throw "),t("em",[e._v("IOException")]),e._v(".\n        Therefore, it must either be caught(in a try-catch) or thrown by\n        "),t("em",[e._v("main()")]),e._v("."),t("br"),e._v("\n        The "),t("em",[e._v("readLine()")]),e._v(" method works similar to the\n        "),t("em",[e._v("nextLine()")]),e._v(" method of Scanner and does not split the input into\n        tokens."),t("br"),e._v("\n        Unlike Scanner, BufferedReader does not do any parsing of the input.\n        This means we have to manually convert the returned string to our\n        desired data-type using their wrapper class functions."),t("br"),e._v(" "),t("strong",[e._v("Note")]),e._v(" - Exception handling in Java will be covered in\n        detail in a later tutorial.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ul",{staticClass:"mt-4 list-disc list-inside"},[t("li",[t("em",[e._v("Integer.parseInt()")])]),e._v(" "),t("li",[t("em",[e._v("Long.parseLong()")])]),e._v(" "),t("li",[t("em",[e._v("Float.parseFloat()")])]),e._v(" "),t("li",[t("em",[e._v("Double.parseDouble()")])]),e._v(" "),t("li",[t("em",[e._v("Boolean.parseBoolean()")]),e._v(" - will only return true only if the\n          string is exactly "),t("em",[e._v("true")]),e._v(", otherwise false.\n        ")])])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",{staticClass:"mt-4"},[t("strong",[e._v("Note")]),e._v(" - These functions will throw a\n        "),t("em",[e._v("NumberFormatException")]),e._v(" if the input is of an unexpected type.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("\n        Unlike Scanner, BufferedReader has a method for reading in a single\n        character(as an "),t("em",[e._v("int")]),e._v(", not char) named "),t("em",[e._v("read()")]),e._v(". But use\n        this method carefully as it does not ignore the terminating newline\n        character. To understand this, run the following.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("\n        When you type in your first character and press "),t("strong",[e._v("Enter")]),e._v(",\n        the program doesn't prompt you for the second time. This is because the\n        terminating newline in your first input gets counted as the second\n        character."),t("br"),e._v("\n        To avoid this problem, you can use the same idea used for Scanner i.e.\n        taking input using "),t("em",[e._v("readLine()")]),e._v(" and obtain its first character\n        using "),t("em",[e._v("charAt(0)")]),e._v("."),t("br"),t("br"),e._v("\n        In competitive programming, the input is usually given in the form of\n        space-separated integers or strings. The Scanner class has methods to\n        directly parse these tokens. But how can this be done with\n        BufferedReader? The\n        "),t("strong",[e._v("StringTokenizer")]),e._v(" class will help us here.\n      ")])},function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("p",[e._v("\n        The "),t("em",[e._v("StringTokenizer()")]),e._v(" constructor takes in two arguments. The\n        original string and the delimiter(optional, whitespace by default). The\n        "),t("em",[e._v("hasMoreTokens()")]),e._v(" method checks whether there are any tokens\n        remaining and "),t("em",[e._v("nextToken()")]),e._v(" returns it as a string. It is then up\n        to us how to parse it."),t("br"),t("br"),e._v("\n        That's all you need to know about user input in Java. Now try to use the\n        Scanner and BufferedReader classes in your programs and see which one\n        suits your use-case better.\n      ")])}],!1,null,null,null);n.default=component.exports;installComponents(component,{ArticleHeader:t(110).default,CodeSnippet:t(111).default})}}]);