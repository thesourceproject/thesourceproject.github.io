(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{238:function(e,t,n){"use strict";n.r(t);var r=n(110),o=n(111),l={name:"basics12",components:{ArticleHeader:r.default,CodeSnippet:o.default},head:{title:"How to use lambda functions for custom sorting | The Source Project",meta:[{hid:"description",name:"description",content:"Java and Python provide an inbuilt sorting functionality that sorts items in a non-decreasing manner. But, what if we want to use a custom sorting logic?"}]}},c=n(8),component=Object(c.a)(l,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("main",[n("article",{staticClass:"w-full max-w-4xl mx-auto flex flex-col"},[n("ArticleHeader",{attrs:{title:"How to use lambda functions for custom sorting",date:"29 Mar '21",readTime:"10 min read",tags:["basics","data","structures","algorithms","java","python","beginner"]}}),e._v(" "),n("p",[e._v("\n        Java and Python provide an inbuilt sorting functionality that sorts\n        items in a non-decreasing manner. But, what if we want to use a custom\n        sorting logic?\n      ")]),e._v(" "),e._m(0),e._v(" "),n("p",{staticClass:"mt-8"},[n("strong",[e._v("Note")]),e._v(" - This tutorial assumes you have some basic\n        understanding of Java and Python. You may refer to our\n        "),n("NuxtLink",{staticClass:"text-text-3 hover:underline focus:underline focus:outline-none",attrs:{to:{path:"/find",query:{q:"basics"}}}},[e._v("previous tutorials")]),e._v("\n        before you continue.\n      ")],1),e._v(" "),e._m(1),e._v(" "),n("CodeSnippet",{attrs:{code:"// Java\nimport java.util.*; // Import 'Arrays' and 'Comparator' classes.\nclass CustomSorting {\n    public static void main(String[] args) {\n        int[] array1 = { 2, 4, 1, 5, 3 }; // Declare a primitive int array.\n        Arrays.sort(array1); // Sort this array in a non-decreasing order.\n        System.out.println(Arrays.toString(array1)); // [1, 2, 3, 4, 5]\n        Integer[] array2 = { 2, 4, 1, 5, 3 }; // Declare an Integer array.\n        Arrays.sort(array2, Comparator.reverseOrder()); // Reverse the sorting order.\n        System.out.println(Arrays.toString(array2)); // [5, 4, 3, 2, 1]\n    }\n}",lang:"language-java"}}),e._v(" "),e._m(2),e._v(" "),n("CodeSnippet",{attrs:{code:"// Java\nimport java.util.*;\nclass CustomSorting {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(2, 4, 1, 5, 3); // Create a new list.\n        Collections.sort(list); // Sort the list with its natural order.\n        System.out.println(list); // [1, 2, 3, 4, 5]\n        Collections.sort(list, Comparator.reverseOrder()); // Reverse the sorting order.\n        System.out.println(list); // [5, 4, 3, 2, 1]\n    }\n}",lang:"language-java"}}),e._v(" "),n("p",[e._v("\n        The Java Collections Interface also provides a similar\n        "),n("em",[e._v("sort()")]),e._v(" function which can be used on any sequential\n        data-structures. It also takes an optional comparator to define the\n        sorting order."),n("br"),n("br"),e._v("\n        Lambda expressions are used to create anonymous functions(i.e. which do\n        not belong to any class) which act like objects. They make the code\n        concise, especially if we only want a single functionality without\n        creating a separate class for it."),n("br"),e._v(" "),n("strong",[e._v("Comparator")]),e._v(" is a functional interface(i.e. it has only\n        one abstract method - "),n("nobr",[n("em",[e._v("compare(T o1, T o2)")])]),e._v(") and can therefore be used as the assignment target for a lambda\n        expression."),n("br"),e._v("\n        Let's understand this with an example.\n      ")],1),e._v(" "),n("CodeSnippet",{attrs:{code:"// Java\nimport java.util.*; // Import 'Arrays' and 'Comparator' classes.\n\nclass CompareBySecond implements Comparator<Integer[]> {\n    public int compare(Integer[] a, Integer[] b) {\n        return a[1].compareTo(b[1]); // Same as 'a[1] - b[1]' but safe from overflow.\n    }\n}\n\npublic class CustomSorting {\n    public static void main(String[] args) {\n        Integer[][] array = { { 1, 2, 0 }, { 4, 1, 1 }, { 5, 0, 1 }, { 2, 5, 1 }, { 6, 3, 4 } }; // Declare a 2-D Integer array.\n        Arrays.sort(array, new CompareBySecond()); // Sort by second-indexed value.\n        System.out.println(Arrays.deepToString(array)); // [[5, 0, 1], [4, 1, 1], [1, 2, 0], [6, 3, 4], [2, 5, 1]]\n    }\n}",lang:"language-java"}}),e._v(" "),n("p",[e._v("\n        The "),n("nobr",[n("em",[e._v("compare(T o1, T o2)")])]),e._v(" method takes in two\n        parameters and returns a value based on their comparison. A negative\n        value indicates that "),n("em",[e._v("o1")]),e._v(" is smaller than "),n("em",[e._v("o2")]),e._v(" and\n        vice-versa."),n("br"),e._v("\n        The syntax for a lambda expression is\n        "),n("nobr",[n("strong",[e._v("(parameters) -> expression")])]),e._v("."),n("br"),e._v("\n        If we use a lambda expression instead, our code will look something like\n        this.\n      ")],1),e._v(" "),n("CodeSnippet",{attrs:{code:"// Java\nimport java.util.*; // Import 'Arrays' and 'Comparator' classes.\npublic class CustomSorting {\n    public static void main(String[] args) {\n        Integer[][] array = { { 1, 2, 0 }, { 4, 1, 1 }, { 5, 0, 1 }, { 2, 5, 1 }, { 6, 3, 4 } };\n        Arrays.sort(array, (a, b) -> a[1].compareTo(b[1])); // Pass lambda expression as comparator.\n        System.out.println(Arrays.deepToString(array)); // [[5, 0, 1], [4, 1, 1], [1, 2, 0], [6, 3, 4], [2, 5, 1]]\n    }\n}",lang:"language-java"}}),e._v(" "),e._m(3),e._v(" "),n("CodeSnippet",{attrs:{code:"// Java\npublic class CustomSorting {\n    public static void main(String[] args) {\n        Integer[][] array = { { 1, 2, 0 }, { 2, 1, 5 }, { 2, 1, 1 }, { 1, 5, 1 }, { 2, 3, 4 } };\n        Arrays.sort(array, (a, b) -> {\n            if (a[0] != b[0]) {\n                return a[0].compareTo(b[0]);\n            }\n            if (a[1] != b[1]) {\n                return a[1].compareTo(b[1]);\n            }\n            return a[2].compareTo(b[2]);\n        });\n        System.out.println(Arrays.deepToString(array)); // [[1, 2, 0], [1, 5, 1], [2, 1, 1], [2, 1, 5], [2, 3, 4]]\n    }\n}",lang:"language-java"}}),e._v(" "),e._m(4),e._v(" "),n("CodeSnippet",{attrs:{code:"# Python3\narray1 = [2, 4, 1, 5, 3]  # Declare our array.\narray1.sort()  # Sort the array.\nprint(array1)  # [1, 2, 3, 4, 5]\narray2 = [2, 4, 1, 5, 3]\narray2.sort(reverse=True)  # Reverse the sorting order.\nprint(array2)  # [5, 4, 3, 2, 1]",lang:"language-python"}}),e._v(" "),e._m(5),e._v(" "),n("CodeSnippet",{attrs:{code:"# Python3\narray1 = [2, 4, 1, 5, 3]\narray2 = sorted(array1)  # Return a sorted copy of the list.\nprint(array1)  # [2, 4, 1, 5, 3] (Original list remains unmodified)\nprint(array2)  # [1, 2, 3, 4, 5]",lang:"language-python"}}),e._v(" "),n("p",[e._v("\n        Python has a "),n("em",[e._v("lambda")]),e._v(" keyword that is used to define\n        anonymous(nameless) functions. Its syntax is\n        "),n("nobr",[n("strong",[n("em",[e._v("lambda")]),e._v(" parameters: expression")])]),e._v(". There are no parentheses around the parameters."),n("br"),e._v("\n        We can customize the sorting order of "),n("em",[e._v("sort()")]),e._v(" using the\n        "),n("em",[e._v("key")]),e._v(" parameter.\n      ")],1),e._v(" "),n("CodeSnippet",{attrs:{code:"# Python3\narray = [[1, 2, 0], [2, 1, 5], [2, 1, 1], [1, 5, 1], [2, 3, 4]]\narray.sort(key=lambda a: -a[1])  # Reverse-sort using the second-indexed value.\nprint(array)  # [[1, 5, 1], [2, 3, 4], [1, 2, 0], [2, 1, 5], [2, 1, 1]]",lang:"language-python"}}),e._v(" "),e._m(6),e._v(" "),n("CodeSnippet",{attrs:{code:"# Python3\narray = [[1, 2, 0], [3, 1, 1], [2, 1, 1], [1, 5, 1], [2, 3, 4]]\narray.sort(key=lambda a: (a[2], a[1], a[0]))  # Tuples are checked from left to right.\nprint(array)  # [[1, 2, 0], [2, 1, 1], [3, 1, 1], [1, 5, 1], [2, 3, 4]]",lang:"language-python"}}),e._v(" "),e._m(7),e._v(" "),n("CodeSnippet",{attrs:{code:"# Python3\narray = [1, 2, 3, 4, 5]\ndef squareLastDigit(num):\n    square = num * num\n    return square % 10\narray.sort(key=squareLastDigit)  # Pass our comparison function as the 'key' parameter.\nprint(array)  # [1, 2, 5, 4, 3]",lang:"language-python"}}),e._v(" "),e._m(8)],1)])}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"mt-12 flex flex-col"},[n("h2",{staticClass:"text-2xl"},[e._v("Getting Started")]),e._v(" "),n("div",{staticClass:"w-6 h-1 bg-background-2 rounded-full"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"mt-6 flex flex-col"},[n("h3",{staticClass:"text-xl"},[e._v("Java")]),e._v(" "),n("div",{staticClass:"w-4 h-1 bg-background-2 rounded-full"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        The "),n("em",[e._v("java.util.Arrays")]),e._v(" class of Java provides an in-place(i.e.\n        using no auxiliary space) "),n("em",[e._v("sort()")]),e._v(" function that is used to sort\n        arrays in a non-decreasing manner. One big limitation of this function\n        is that\n        "),n("strong",[e._v("it can only sort generic-type arrays with a comparator")]),e._v("."),n("br"),e._v("\n        We cannot use custom comparators or even\n        "),n("em",[e._v("Comparator.reverseOrder()")]),e._v(" with primitive-type(int, long,\n        char,float, double) arrays. In that case, we can copy our array to its\n        respective wrapper-value(Integer, Long, Character, Float, Double) array\n        and apply the "),n("em",[e._v("sort()")]),e._v(" function on it.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        Notice how concise it looks now. No need for creating separate classes\n        for different comparators. If we wanted to sort according to the\n        third-indexed value, we simply modify the lambda expression."),n("br"),n("br"),e._v("\n        We are not limited to simple expressions and can also use more complex\n        sorting logic in our lambda expressions. Simply enclose the multiple\n        statements and the return statement within curly braces."),n("br"),e._v("\n        Suppose, we wanted to sort the integer arrays by the first-index, then\n        the second-index, and then finally the third index. Our lambda\n        expression would look like this.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"mt-6 flex flex-col"},[n("h3",{staticClass:"text-xl"},[e._v("Python")]),e._v(" "),n("div",{staticClass:"w-4 h-1 bg-background-2 rounded-full"})])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        Python lists have an in-place "),n("em",[e._v("sort()")]),e._v(" function which accepts an\n        optional "),n("em",[e._v("reverse")]),e._v(" parameter that reverses the sorting order."),n("br"),e._v("\n        There's also a very helpful "),n("em",[e._v("sorted()")]),e._v(" function that creates a\n        copy of the list, sorts it, and then returns it. It supports all of the\n        optional parameters of "),n("em",[e._v("sort()")]),e._v(".\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        The "),n("em",[e._v("key")]),e._v(" parameter of "),n("em",[e._v("sort()")]),e._v(" takes in a single-argument\n        function that returns a key determining the sort order. Items with\n        smaller keys will be placed before the items with larger keys."),n("br"),n("br"),e._v("\n        If we have multiple criteria, we can return tuples. Suppose, we wanted\n        to sort the integer arrays by the third-index, then the second-index,\n        and then finally the first index. Our lambda expression would look like\n        this.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        One limitation of lambda functions in Python is that we cannot have\n        multiple statements in the expression. In that case, we can use an\n        ordinary single-argument function and pass it as the "),n("em",[e._v("key")]),e._v("."),n("br"),e._v("\n        Here, we want to sort integers based on the last digit of their squares.\n      ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n        The "),n("em",[e._v("sort()")]),e._v(" function is one of the most commonly used ones.\n        Knowing how to use it is essential, especially in competitive\n        programming."),n("br"),e._v("\n        Now keep on practicing.\n      ")])}],!1,null,null,null);t.default=component.exports;installComponents(component,{ArticleHeader:n(110).default,CodeSnippet:n(111).default})}}]);